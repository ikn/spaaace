#! /usr/bin/python2

import os
from time import time
from random import choice

import pygame
from pygame.time import wait
pygame.mixer.pre_init(buffer = 1024)
pygame.init()
if os.name == 'nt':
    # for Windows freeze support
    import pygame._view
import evthandler as eh

from spaaace.title import Title
from spaaace.level import Level
from spaaace import conf

class Fonts (object):
    """Collection of pygame.font.Font instances."""

    def __init__ (self, *fonts):
        self.fonts = {}
        for font in fonts:
            self.add(font)

    def add (self, font, force_reload = False):
        """Load a font and add it to the collection."""
        font = tuple(font)
        if force_reload or font not in self.fonts:
            fn, size, bold = font
            self.fonts[font] = pygame.font.Font(conf.FONT_DIR + fn, int(size),
                                                bold = bold)
        return self.fonts[font]

    def text (self, font, text, colour, shadow = None, width = None, just = 0,
              minimise = False, line_spacing = 0):
        """Render text from a font.

text(font, text, colour[, shadow][, width], just = 0, minimise = False,
     line_spacing = 0) -> (surface, lines)

font: (font name, size, is_bold) tuple.
text: text to render.
colour: (R, G, B[, A]) tuple.
shadow: to draw a drop-shadow: (colour, offset) tuple, where offset is (x, y).
width: maximum width of returned surface (wrap text).  ValueError is raised if
       any words are too long to fit in this width.
just: if the text has multiple lines, justify: 0 = left, 1 = centre, 2 = right.
minimise: if width is set, treat it as a minimum instead of absolute width
          (that is, shrink the surface after, if possible).
line_spacing: space between lines, in pixels.

surface: pygame.Surface containing the rendered text.
lines: final number of lines of text.

"""
        font = tuple(font)
        self.add(font)
        font, lines = self.fonts[font], []
        if shadow is None:
            offset = (0, 0)
        else:
            shadow_colour, offset = shadow

        # split into lines
        text = text.splitlines()
        if width is None:
            width = max(font.size(line)[0] for line in text)
            lines = text
            minimise = True
        else:
            for line in text:
                if font.size(line)[0] > width:
                    # wrap
                    words = line.split(' ')
                    # check if any words won't fit
                    for word in words:
                        if font.size(word)[0] >= width:
                            e = '\'{0}\' doesn\'t fit on one line'.format(word)
                            raise ValueError(e)
                    # build line
                    build = ''
                    for word in words:
                        temp = build + ' ' if build else build
                        temp += word
                        if font.size(temp)[0] < width:
                            build = temp
                        else:
                            lines.append(build)
                            build = word
                    lines.append(build)
                else:
                    lines.append(line)
        if minimise:
            width = max(font.size(line)[0] for line in lines)

        # create surface
        h = 0
        for line in lines:
            h += font.size(line)[1] + line_spacing
        # last added gap was after the last line
        h -= line_spacing
        surface = pygame.Surface((width + offset[0], h + offset[1]))
        surface = surface.convert_alpha()
        surface.fill((0, 0, 0, 0))

        # add text
        todo = []
        if shadow is not None:
            todo.append((shadow_colour, 1))
        todo.append((colour, -1))
        num_lines = 0
        for colour, mul in todo:
            o = (max(mul * offset[0], 0), max(mul * offset[1], 0))
            h = 0
            for line in lines:
                if line:
                    num_lines += 1
                    s = font.render(line, True, colour)
                    if just == 2:
                        surface.blit(s, (width - s.get_width() + o[0],
                                         h + o[1]))
                    elif just == 1:
                        surface.blit(s, ((width - s.get_width()) / 2 + o[0],
                                         h + o[1]))
                    else:
                        surface.blit(s, (o[0], h + o[1]))
                h += font.size(line)[1] + line_spacing
        return surface, num_lines


class Game (object):
    """Handles backends.

Takes the same arguments as Game.start_backend and passes them to it.

    METHODS

start_backend
quit_backend
set_backend_attrs
img
play_snd
find_music
play_music
quit
run
restart
refresh_display
toggle_fullscreen
minimise

    ATTRIBUTES

running: set to False to exit the main loop (Game.run).
imgs: image cache.
files: loaded image cache (before resize).
sounds: sound effect cache.
music: filenames for known music.
fonts: a Fonts instance.
backend: the current running backend.
backends: a list of previous (nested) backends, most 'recent' last.

"""

    def __init__ (self, cls, *args):
        self.running = False
        self.imgs = {}
        self.files = {}
        self.sounds = []
        # start playing music
        pygame.mixer.music.set_volume(conf.MUSIC_VOLUME * .01)
        pygame.mixer.music.set_endevent(conf.EVENT_ENDMUSIC)
        self.find_music()
        self.play_music()
        # load display settings
        self.refresh_display()
        self.fonts = Fonts()
        # start first backend
        self.backends = []
        self.start_backend(cls, *args)

    def start_backend (self, cls, *args):
        """Start a new backend.

start_backend(cls, *args) -> backend

cls: the backend class to instantiate.
args: arguments to pass to the constructor.

backend: the new created instance of cls that is the new backend.

Backends handle pretty much everything, including drawing, and must have update
and draw methods, as follows:

update(): handle input and make any necessary calculations.
draw(screen) -> drawn: draw anything necessary to screen; drawn is True if the
                       whole display needs to be updated, something falsy if
                       nothing needs to be updated, else a list of rects to
                       update the display in.

A backend is also given a dirty attribute, which indicates whether its draw
method should redraw everything (it should set it to False when it does so),
and should define a FRAME attribute, which is the length of one frame in
seconds.

A backend is constructed via
cls(Game_instance, EventHandler_instance, *args), and should store
EventHandler_instance in its event_handler attribute.

"""
        # create event handler for this backend
        h = eh.MODE_HELD
        event_handler = eh.EventHandler({
            pygame.VIDEORESIZE: self._resize_cb,
            conf.EVENT_ENDMUSIC: self.play_music
        }, [
            (conf.KEYS_FULLSCREEN, self.toggle_fullscreen, eh.MODE_ONDOWN),
            (conf.KEYS_MINIMISE, self.minimise, eh.MODE_ONDOWN)
        ], False, self.quit)
        # store current backend in history, if any
        try:
            self.backends.append(self.backend)
        except AttributeError:
            pass
        # create new backend
        self.backend = cls(self, event_handler, *args)
        return self.backend

    def quit_backend (self, depth = 1, no_quit = False):
        """Quit the currently running backend.

quit_backend(depth = 1, no_quit = False)

depth: quit this many backends.
no_quit: if True, don't quit if this is the last backend.  Only pass this if
         you're starting another backend in the same frame.

If the running backend is the last (root) one, exit the game.

"""
        depth = int(depth)
        if depth < 1:
            return
        try:
            self.backend = self.backends.pop()
        except IndexError:
            if no_quit:
                del self.backend
            else:
                self.quit()
        else:
            self.backend.dirty = True
        depth -= 1
        if depth:
            self.quit_backend(depth)
        else:
            # need to update new backend before drawing
            self._update_again = True

    def set_backend_attrs (self, cls, attr, val, current = True,
                           inherit = True):
        """Set an attribute of all backends with a specific class.

set_backend_attrs(cls, attr, val, current = True, inherit = True)

cls: the backend class to look for.
attr: the name of the attribute to set.
val: the value to set the attribute to.
current: include the current backend in the search.
inherit: also apply to all classes that inherit from the given class.

        """
        for backend in self.backends + ([self.backend] if current else []):
            if isinstance(backend, cls) if inherit else (backend == cls):
                setattr(backend, attr, val)

    def convert_img (self, img):
        """Convert an image for blitting."""
        if img.get_alpha() is None and img.get_colorkey() is None:
            img = img.convert()
        else:
            img = img.convert_alpha()
        return img

    def img (self, data, size = None):
        """Load or render an image, or retrieve it from cache.

img(data[, size], text = False) -> surface

data: if rendering text, a tuple of args to pass to Fonts.text, else a filename
      to load.
size: scale the image.  Can be an (x, y) size, a rect (in which case its
      dimension is used), or a number to scale by.  Ignored if rendering text.

"""
        text = not isinstance(data, basestring)
        if text:
            data = tuple(tuple(x) if isinstance(x, list) else x for x in data)
        if size is not None:
            try:
                if len(size) == 4:
                    # rect
                    size = size[2:]
                size = tuple(size)
            except TypeError:
                # number
                pass
        key = (data, size)
        if key in self.imgs:
            return self.imgs[key]
        got_size = size is not None and size != 1 and not text
        # else new: load/render
        if text:
            img, lines = self.fonts.text(*data)
            img = img.convert_alpha()
        else:
            # also cache loaded images to reduce file I/O
            if data in self.files:
                img = self.files[data]
            else:
                img = pygame.image.load(conf.IMG_DIR + data)
                # convert first if won't resize, as it'll come from here
                if not got_size:
                    img = self.convert_img(img)
                self.files[data] = img
        # scale
        if got_size:
            if not isinstance(size, tuple):
                size = [int(size * x) for x in img.get_size()]
            img = pygame.transform.smoothscale(img, size)
            # speed up blitting (if not resized, this is already done)
            img = self.convert_img(img)
        result = (img, lines) if text else img
        if got_size or text:
            # add to cache (if not resized, this is in the file cache)
            self.imgs[key] = result
        return result

    def play_snd (self, ID, volume = 1):
        """Play a sound with the given ID.

Only one instance of a sound will be played each frame.

"""
        IDs = [ID + str(i) for i in xrange(conf.SOUNDS[ID])]
        ID = choice(IDs)
        # load sound
        try:
            snd = conf.SOUND_DIR + ID + '.ogg'
            snd = pygame.mixer.Sound(snd)
            if snd.get_length() < 10 ** -3:
                # no way this is valid
                return
        except KeyError:
            return # just don't play the sound if it's not registered
        snd.set_volume(conf.SOUND_VOLUME * volume * .01)
        self.sounds.append(snd)

    def _play_snds (self):
        """Play queued up sounds for this frame."""
        for snd in self.sounds:
            snd.play()
        self.sounds = []

    def find_music (self):
        """Store a list of music files."""
        d = conf.MUSIC_DIR
        try:
            files = os.listdir(d)
        except OSError:
            # no directory
            self.music = []
        else:
            self.music = [d + f for f in files if os.path.isfile(d + f)]

    def play_music (self, event = None):
        """Play next piece of music."""
        if self.music:
            f = choice(self.music)
            pygame.mixer.music.load(f)
            pygame.mixer.music.play()
        else:
            # stop currently playing music if there's no music to play
            pygame.mixer.music.stop()

    def quit (self, event = None):
        """Quit the game."""
        self.running = False

    def _update (self):
        """Run the backend's update method."""
        self.backend.event_handler.update()
        # if a new backend was created during the above call, we'll end up
        # updating twice before drawing
        if not self._update_again:
            self.backend.update()

    def _draw (self):
        """Run the backend's draw method and update the screen."""
        draw = self.backend.draw(self.screen)
        if draw is True:
            pygame.display.flip()
        elif draw:
            pygame.display.update(draw)

    def run (self):
        """Main loop."""
        self.running = True
        stat_t = conf.FPS_STAT_TIME
        start_stat = t0 = time()
        free = n = 0
        while self.running:
            num_updates = conf.GRAPHICS <= conf.HALF_FPS_THRESHOLD
            num_updates += (conf.GRAPHICS <= conf.THIRD_FPS_THRESHOLD) + 1
            for i in xrange(num_updates):
                # update
                self._update_again = False
                self._update()
                if self._update_again:
                    self._update_again = False
                    self._update()
                # play sounds
                self._play_snds()
            # draw
            self._draw()
            # wait
            frame = self.backend.FRAME * num_updates
            t1 = time()
            this_free = wait(int(1000 * (frame - t1 + t0)))
            free += this_free
            t0 = t1 + this_free / 1000.
            n += 1
            if n >= stat_t / frame:
                fps = stat_t / (frame * (t0 - start_stat))
                free = free * frame / stat_t
                print '{0:.2f}/{1} FPS {2:.2f}/{3:.2f} ms sleeping'.format(fps, 1 / frame, free, frame * 1000)
                tw = n = 0
                start_stat = t0

    def restart (self, *args):
        """Restart the game."""
        global restarting
        restarting = True
        self.quit()

    def refresh_display (self, *args):
        """Update the display mode from conf, and notify the backend."""
        flags = conf.FLAGS
        if conf.FULLSCREEN:
            flags |= pygame.FULLSCREEN
            r = conf.RES_F
        else:
            r = (w, h) = conf.RES_W
        s = conf.SIZE
        # lock aspect ratio
        r = list(r)
        ratio = s[0] / s[1]
        r[0] = min(r[0], r[1] * ratio)
        r[1] = min(r[1], r[0] / ratio)
        conf.RES = r
        # set new scale
        conf.SCALE = float(r[1]) / s[1]
        # set mode
        if conf.RESIZABLE:
            flags |= pygame.RESIZABLE
        self.screen = pygame.display.set_mode(r, flags)
        try:
            self.backend.dirty = True
        except AttributeError:
            pass
        # clear image cache (very unlikely we'll need the same sizes)
        self.imgs = {}

    def toggle_fullscreen (self, *args):
        """Toggle fullscreen mode."""
        conf.FULLSCREEN = not conf.FULLSCREEN
        self.refresh_display()

    def minimise (self, *args):
        """Minimise the display, pausing if possible (and necessary)."""
        if isinstance(self.backend, Level) and not isinstance(self.backend, Title) and not self.backend.paused:
             self.backend.toggle_paused()
        pygame.display.iconify()

    def _resize_cb (self, event):
        """Callback to handle a window resize."""
        conf.RES_W = (event.w, event.h)
        self.refresh_display()

if __name__ == '__main__':
    if conf.WINDOW_ICON is not None:
        pygame.display.set_icon(pygame.image.load(conf.WINDOW_ICON))
    if conf.WINDOW_TITLE is not None:
        pygame.display.set_caption(conf.WINDOW_TITLE)
    pygame.mouse.set_visible(False)
    restarting = True
    while restarting:
        restarting = False
        Game(Title).run()

pygame.quit()
